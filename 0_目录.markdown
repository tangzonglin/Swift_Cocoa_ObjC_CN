## Using Swift with Cocoa and Objective-C (Swift 2.1) 中文版

### 目录

- [开始](./1_开始.markdown#开始)
	+ [基本设置](./1_开始.markdown#基本设置)
		- [设置Swift开发环境](./1_开始.markdown#设置swift开发环境)
		- [在Xcode中创建一个Swift项目](./1_开始.markdown#在xcode中创建一个swift项目)
		- [理解Swift的框架导入过程](./1_开始.markdown#理解swift的框架导入过程)
- [互操作性](./2_互操作性.markdown#互操作性)
	+ [与Objective-C API交互](./2_互操作性.markdown#与objective-c-api交互)
		- [初始化](./2_互操作性.markdown#初始化)
			+ [类的工厂方法和快捷构造方法](./2_互操作性.markdown#类的工厂方法和快捷构造方法)
		- [可失败构造方法](./2_互操作性.markdown#可失败构造方法)
		- [访问属性](./2_互操作性.markdown#访问属性)
		- [方法的使用](./2_互操作性.markdown#方法的使用)
		- [id的兼容性](./2_互操作性.markdown#id的兼容性)
			+ [无法识别的方法选择器和可选调用链](./2_互操作性.markdown#无法识别的方法选择器和可选调用链)
			+ [AnyObject向下类型转换](./2_互操作性.markdown#anyobject向下类型转换)
		- [空值和可选类型](./2_互操作性.markdown#空值和可选类型)
		- [轻量级泛型](./2_互操作性.markdown#轻量级泛型)
		- [扩展](./2_互操作性.markdown#扩展)
		- [闭包](./2_互操作性.markdown#闭包)
			+ [捕获self的时候避免强引用循环](./2_互操作性.markdown#捕获self的时候避免强引用循环)
		- [对象比较](./2_互操作性.markdown#对象比较)
		- [Swift类型的兼容性](./2_互操作性.markdown#swift类型的兼容性)
			+ [在Swift中对Objective-C暴露接口](./2_互操作性.markdown#在swift中对objective-c暴露接口)
			+ [使用动态分配](./2_互操作性.markdown#使用动态分配)
		- [Objective-C的方法选择器](./2_互操作性.markdown#objective-c的方法选择器)
			+ [用performSelector来发送消息](./2_互操作性.markdown#用performselector来发送消息)
	+ [编写具备Objective-C行为的Swift类](./2_互操作性.markdown#编写具备objective-c行为的swift类)
		- [继承Objective-C的类](./2_互操作性.markdown#继承objective-c的类)
			+ [NSCoding](./2_互操作性.markdown#nscoding)
		- [支持协议](./2_互操作性.markdown#支持协议)
		- [编写构造方法和析构方法](./2_互操作性.markdown#编写构造方法和析构方法)
		- [在Objective-C API中使用Swift的类名](./2_互操作性.markdown#在objective-c-api中使用swift的类名)
		- [与Interface Builder整合](./2_互操作性.markdown#与interface-builder整合)
			+ [使用外连和动作](./2_互操作性.markdown#使用外连和动作)
			+ [实时渲染](./2_互操作性.markdown#实时渲染)
		- [设置属性的参数](./2_互操作性.markdown#设置属性的参数)
			+ [强引用和弱引用](./2_互操作性.markdown#强引用和弱引用)
			+ [读写与只读](./2_互操作性.markdown#读写与只读)
			+ [复制语义](./2_互操作性.markdown#复制语义)
		- [实现Core Data的托管对象子类](./2_互操作性.markdown#实现core-data的托管对象子类)
	+ [使用Cocoa数据类型](./2_互操作性.markdown#使用cocoa数据类型)
		- [字符串](./2_互操作性.markdown#字符串)
			+ [本地化](./2_互操作性.markdown#本地化)
		- [数字类型](./2_互操作性.markdown#数字类型)
		- [集合类](./2_互操作性.markdown#集合类)
			+ [数组](./2_互操作性.markdown#数组)
			+ [数集](./2_互操作性.markdown#数集)
			+ [字典](./2_互操作性.markdown#字典)
		- [错误](./2_互操作性.markdown#错误)
		- [Foundation数据类型](./2_互操作性.markdown#foundation数据类型)
		- [Foundation函数](./2_互操作性.markdown#foundation函数)
		- [Core Foundation](./2_互操作性.markdown#core-foundation)
			+ [重映射的类型](./2_互操作性.markdown#重映射的类型)
			+ [受内存管理的对象](./2_互操作性.markdown#受内存管理的对象)
			+ [不受管理的对象](./2_互操作性.markdown#不受管理的对象)
	+ [使用Cocoa设计模式](./2_互操作性.markdown#使用cocoa设计模式)
		- [委托](./2_互操作性.markdown#委托)
		- [懒惰初始化](./2_互操作性.markdown#懒惰初始化)
		- [错误处理](./2_互操作性.markdown#错误处理)
			+ [捕捉和处理错误](./2_互操作性.markdown#捕捉和处理错误)
			+ [把错误转换成可选类型值](./2_互操作性.markdown#把错误转换成可选类型值)
			+ [抛出错误](./2_互操作性.markdown#抛出错误)
		- [键值观察](./2_互操作性.markdown#键值观察)
		- [撤销](./2_互操作性.markdown#撤销)
		- [目标-动作](./2_互操作性.markdown#目标-动作)
		- [单例模式](./2_互操作性.markdown#单例模式)
		- [自省](./2_互操作性.markdown#自省)
		- [序列化](./2_互操作性.markdown#序列化)
			+ [验证序列化数据](./2_互操作性.markdown#验证序列化数据)
		- [API可用性](./2_互操作性.markdown#api可用性)
		- [处理命令行参数](./2_互操作性.markdown#处理命令行参数)
	+ [与C语言API交互](./2_互操作性.markdown#与c语言api交互)
		- [基本类型](./2_互操作性.markdown#基本类型)
		- [枚举类型](./2_互操作性.markdown#枚举类型)
		- [选项集](./2_互操作性.markdown#选项集)
		- [联合体](./2_互操作性.markdown#联合体)
		- [位域](./2_互操作性.markdown#位域)
		- [指针](./2_互操作性.markdown#指针)
			+ [常指针](./2_互操作性.markdown#常指针)
			+ [可变指针](./2_互操作性.markdown#可变指针)
			+ [自动释放指针](./2_互操作性.markdown#自动释放指针)
			+ [函数指针](./2_互操作性.markdown#函数指针)
		- [数据类型大小计算](./2_互操作性.markdown#数据类型大小计算)
		- [全局常量](./2_互操作性.markdown#全局常量)
		- [预处理指令](./2_互操作性.markdown#预处理指令)
			+ [简单的宏](./2_互操作性.markdown#简单的宏)
			+ [复杂的宏](./2_互操作性.markdown#复杂的宏)
			+ [构建配置](./2_互操作性.markdown#构建配置)
- [混合编程](./3_混合编程.markdown#混合编程)
	+ [在同一个项目中使用Swift和Objective-C](./3_混合编程.markdown#在同一个项目中使用swift和objective-c)
		- [混合编程概览](./3_混合编程.markdown#混合编程概览)
		- [从同一个应用编译目标中导入代码](./3_混合编程.markdown#从同一个应用编译目标中导入代码)
			+ [把Objective-C导入Swift](./3_混合编程.markdown#把objective-c导入swift)
				- [把同一个编译目标中的Objective-C代码导入Swift](./3_混合编程.markdown#把同一个编译目标中的objective-c代码导入swift)
		- [把Swift导入Objective-C](./3_混合编程.markdown#把swift导入objective-c)
				- [把同一个编译目标中的Swift代码导入Objective-C](./3_混合编程.markdown#把同一个编译目标中的swift代码导入objective-c)
		- [从同一个框架编译目标中导入代码](./3_混合编程.markdown#从同一个框架编译目标中导入代码)
			+ [把Objective-C导入Swift](./3_混合编程.markdown#把objective-c导入swift)
				- [把同一个框架中的Objective-C代码导入Swift](./3_混合编程.markdown#把同一个框架中的objective-c代码导入swift)
		- [把Swift导入Objective-C](./3_混合编程.markdown#把swift导入objective-c)
				- [把同一个编译框架中的Swift代码导入Objective-C](./3_混合编程.markdown#把同一个编译框架中的swift代码导入objective-c)
		- [导入外置框架](./3_混合编程.markdown#导入外置框架)
		- [在Objective-C中使用Swift](./3_混合编程.markdown#在objective-c中使用swift)
			+ [在Objective-C头文件中引用Swift的类和协议](./3_混合编程.markdown#在objective-c头文件中引用swift的类和协议)
			+ [在Objective-C实现中接受Swift的协议](./3_混合编程.markdown#在objective-c实现中接受swift的协议)
		- [覆盖Objective-C接口中的Swift名字](./3_混合编程.markdown#覆盖objective-c接口中的swift名字)
			+ [类的工厂方法](./3_混合编程.markdown#类的工厂方法)
			+ [枚举](./3_混合编程.markdown#枚举)
		- [使Objective-C的接口在Swift中不可用](./3_混合编程.markdown#使objective-c的接口在swift中不可用)
		- [改进Objective-C的声明](./3_混合编程.markdown#改进objective-c的声明)
		- [给产品模块命名](./3_混合编程.markdown#给产品模块命名)
		- [问题诊断和注意事项](./3_混合编程.markdown#问题诊断和注意事项)
- [迁移到Swift](./4_迁移到Swift.markdown#迁移到swift)
	+ [把你的Objective-C代码迁移到Swift](./4_迁移到Swift.markdown#把你的objective-c代码迁移到swift)
		- [让Objective-C代码为迁移做好准备](./4_迁移到Swift.markdown#让objective-c代码为迁移做好准备)
		- [迁移过程](./4_迁移到Swift.markdown#迁移过程)
			+ [开始之前](./4_迁移到Swift.markdown#开始之前)
			+ [迁移过程中](./4_迁移到Swift.markdown#迁移过程中)
			+ [收尾工作](./4_迁移到Swift.markdown#收尾工作)
		- [问题诊断和注意事项](./4_迁移到Swift.markdown#问题诊断和注意事项)

*文档生成于2015-11-02 13:52:22 +0800*
